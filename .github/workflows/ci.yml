name: spec2rtl

permissions:
  contents: read

env:
  OSS_CAD_SUITE_TAG: 2024-08-26
  OSS_CAD_SUITE_PLATFORM: linux-x64

on:
  push:
  pull_request:

jobs:
  smoke:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Build Synlig (Yosys+UHDM) with cache
        id: synlig-prepare
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y \
            build-essential clang bison flex libreadline-dev gawk tcl-dev libffi-dev \
            git pkg-config python3 python3-venv python3-pip zlib1g-dev cmake ninja-build \
            graphviz xdot
          if [ ! -d synlig ]; then
            git clone --recursive https://github.com/chipsalliance/synlig.git
          else
            cd synlig
            git fetch --recurse-submodules --tags
            git submodule update --init --recursive
            cd ..
          fi
          cd synlig
          SYNLIG_SHA=$(git rev-parse HEAD)
          echo "SYNLIG_SHA=$SYNLIG_SHA" >> $GITHUB_ENV
          echo "commit=$SYNLIG_SHA" >> $GITHUB_OUTPUT
      - name: Restore Synlig cache
        id: synlig-cache
        uses: actions/cache@v4
        with:
          path: |
            synlig/build
            synlig/install
          key: synlig-${{ steps.synlig-prepare.outputs.commit }}
          restore-keys: synlig-
      - name: Check Synlig binary
        id: synlig-check
        shell: bash
        run: |
          if [ -f synlig/install/bin/yosys ]; then
            echo "needs_build=false" >> $GITHUB_OUTPUT
          else
            echo "needs_build=true" >> $GITHUB_OUTPUT
          fi
      - name: Compile Synlig
        if: ${{ steps.synlig-cache.outputs.cache-hit != 'true' || steps.synlig-check.outputs.needs_build == 'true' }}
        shell: bash
        run: |
          set -euo pipefail
          python3 -m pip install --upgrade "pip<25"
          python3 -m pip install --user "orderedmultidict>=1.0,<2"
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          python3 -c "import orderedmultidict, sys; print('orderedmultidict', orderedmultidict.__version__)"
          cd synlig
          cmake -S . -B build -GNinja -DCMAKE_BUILD_TYPE=Release
          ninja -C build
          cmake --install build --prefix install
          ./install/bin/yosys -V | head -n 1
      - name: Export Synlig Yosys
        shell: bash
        run: |
          echo "$GITHUB_WORKSPACE/synlig/install/bin" >> $GITHUB_PATH
          echo "YOSYS_SV_BIN=$GITHUB_WORKSPACE/synlig/install/bin/yosys" >> $GITHUB_ENV
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install EDA
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y verilator jq python3-venv python3-pip gh boolector z3
          python3 -m pip install --upgrade pip
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "$GITHUB_WORKSPACE/oss-cad-suite/bin" >> $GITHUB_PATH
          OSS_TAG="${OSS_CAD_SUITE_TAG}"
          OSS_PLATFORM="${OSS_CAD_SUITE_PLATFORM}"
          INFO=$(gh release view -R YosysHQ/oss-cad-suite-build "$OSS_TAG" --json assets)
          OSS_ASSET=$(printf '%s' "$INFO" | jq -r '.assets[].name' | grep -E "^oss-cad-suite-${OSS_PLATFORM}.*\\.(tar\\.xz|tgz)$" | head -n1)
          gh release download -R YosysHQ/oss-cad-suite-build "$OSS_TAG" -p "$OSS_ASSET" -O "/tmp/$OSS_ASSET"
          mkdir -p "$GITHUB_WORKSPACE/oss-cad-suite"
          tar xf "/tmp/$OSS_ASSET" -C "$GITHUB_WORKSPACE/oss-cad-suite" --strip-components=1
          echo "YOSYS_SV_BIN=$GITHUB_WORKSPACE/oss-cad-suite/bin/yosys" >> $GITHUB_ENV
          export PATH="$GITHUB_WORKSPACE/oss-cad-suite/bin:$PATH"
          set -euo pipefail
          ./tools/yosys-sv -Q -p "help read_systemverilog" | head -n 3
          sby --version
          boolector --version || true
          z3 --version || true

      - name: Python deps
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install --upgrade pip
          if [ -f requirements.lock ]; then
            pip install -r requirements.lock
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
      - name: Env & spec
        run: |
          . .venv/bin/activate
          make env
          make spec
      - name: Lint + report + gates
        env:
          REPORTS_DIR: reports/ci_smoke
          SEED: 42
        run: |
          . .venv/bin/activate
          make lint
          make report
          python3 scripts/check_gates.py --policies policies.yml --reports "$REPORTS_DIR"
      - name: Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: smoke-reports
          path: reports/ci_smoke/**

  full:
    runs-on: ubuntu-latest
    needs: smoke
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Build Synlig (Yosys+UHDM) with cache
        id: synlig-prepare
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y \
            build-essential clang bison flex libreadline-dev gawk tcl-dev libffi-dev \
            git pkg-config python3 python3-venv python3-pip zlib1g-dev cmake ninja-build \
            graphviz xdot
          if [ ! -d synlig ]; then
            git clone --recursive https://github.com/chipsalliance/synlig.git
          else
            cd synlig
            git fetch --recurse-submodules --tags
            git submodule update --init --recursive
            cd ..
          fi
          cd synlig
          SYNLIG_SHA=$(git rev-parse HEAD)
          echo "SYNLIG_SHA=$SYNLIG_SHA" >> $GITHUB_ENV
          echo "commit=$SYNLIG_SHA" >> $GITHUB_OUTPUT
      - name: Restore Synlig cache
        id: synlig-cache
        uses: actions/cache@v4
        with:
          path: |
            synlig/build
            synlig/install
          key: synlig-${{ steps.synlig-prepare.outputs.commit }}
          restore-keys: synlig-
      - name: Check Synlig binary
        id: synlig-check
        shell: bash
        run: |
          if [ -f synlig/install/bin/yosys ]; then
            echo "needs_build=false" >> $GITHUB_OUTPUT
          else
            echo "needs_build=true" >> $GITHUB_OUTPUT
          fi
      - name: Compile Synlig
        if: ${{ steps.synlig-cache.outputs.cache-hit != 'true' || steps.synlig-check.outputs.needs_build == 'true' }}
        shell: bash
        run: |
          set -euo pipefail
          python3 -m pip install --upgrade "pip<25"
          python3 -m pip install --user "orderedmultidict>=1.0,<2"
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          python3 -c "import orderedmultidict, sys; print('orderedmultidict', orderedmultidict.__version__)"
          cd synlig
          cmake -S . -B build -GNinja -DCMAKE_BUILD_TYPE=Release
          ninja -C build
          cmake --install build --prefix install
          ./install/bin/yosys -V | head -n 1
      - name: Export Synlig Yosys
        shell: bash
        run: |
          echo "$GITHUB_WORKSPACE/synlig/install/bin" >> $GITHUB_PATH
          echo "YOSYS_SV_BIN=$GITHUB_WORKSPACE/synlig/install/bin/yosys" >> $GITHUB_ENV
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install EDA
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y verilator jq python3-venv python3-pip gh boolector z3
          python3 -m pip install --upgrade pip
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "$GITHUB_WORKSPACE/oss-cad-suite/bin" >> $GITHUB_PATH
          OSS_TAG="${OSS_CAD_SUITE_TAG}"
          OSS_PLATFORM="${OSS_CAD_SUITE_PLATFORM}"
          INFO=$(gh release view -R YosysHQ/oss-cad-suite-build "$OSS_TAG" --json assets)
          OSS_ASSET=$(printf '%s' "$INFO" | jq -r '.assets[].name' | grep -E "^oss-cad-suite-${OSS_PLATFORM}.*\\.(tar\\.xz|tgz)$" | head -n1)
          gh release download -R YosysHQ/oss-cad-suite-build "$OSS_TAG" -p "$OSS_ASSET" -O "/tmp/$OSS_ASSET"
          mkdir -p "$GITHUB_WORKSPACE/oss-cad-suite"
          tar xf "/tmp/$OSS_ASSET" -C "$GITHUB_WORKSPACE/oss-cad-suite" --strip-components=1
          echo "YOSYS_SV_BIN=$GITHUB_WORKSPACE/oss-cad-suite/bin/yosys" >> $GITHUB_ENV
          export PATH="$GITHUB_WORKSPACE/oss-cad-suite/bin:$PATH"
          set -euo pipefail
          ./tools/yosys-sv -Q -p "help read_systemverilog" | head -n 3
          sby --version
          boolector --version || true
          z3 --version || true

      - name: Python deps
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install --upgrade pip
          if [ -f requirements.lock ]; then
            pip install -r requirements.lock
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
      - name: UHDM synth + formal + mutate
        env:
          REPORTS_DIR: reports/ci
          SEED: 12345
          YOSYS_SV_BIN: ${{ env.YOSYS_SV_BIN }}
        run: |
          . .venv/bin/activate
          ./tools/yosys-sv -Q -p "help read_systemverilog" | head -n 3
          make quick
          make synth
          make formal_core || true
          make mutate
          python3 scripts/check_gates.py --policies policies.yml --reports "$REPORTS_DIR"
      - name: Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: full-reports
          path: reports/ci/**
